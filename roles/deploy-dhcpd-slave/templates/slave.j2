{{ ansible_managed | comment }}
# {{ git_repo.url }}
# admin {{ git_repo.admin }} bus {{ git_repo.bus }}

failover peer "failover-dhcp" {
  secondary; # This defines the slave
  address {{ DHCP_SLAVE }}; ##MUST BE REPLACED WITH A SLAVE VARIABLE
  port {{ DHCP_PEER_PORT }}; ##for data exchange between hosts
  peer address {{ DHCP_MASTER }}; ##MUST BE REPLACED WITH A MASTER VARIABLE
  peer port {{ DHCP_PEER_PORT }}; ##for data exchange between hosts
  max-response-delay 60;
  max-unacked-updates 10;
  #mclt 3600; ## Maximum client lead time must be declared on MASTER, not on a SLAVE
  ##split 128; # 128 is balanced; use 255 if primary is 100% responsible until failure
  load balance max seconds 3;
}

authoritative;
default-lease-time {{ DHCP_LEASE_TIME_DEFAULT }}; # 1 day
max-lease-time {{ DHCP_LEASE_TIME_MAX }}; # 1 day

ddns-update-style interim;
update-static-leases on;
one-lease-per-client on;

# We generated the rndc-key when setting up DNS servers
#key "rndc-key" {
#  algorithm hmac-md5;
#  secret "T0+1uWvaiKLkhWutTNhsGvLw7m4CXbjHr+3CrDwQP5ZMNHeRSvghg2XxQvT3uGVwNle9oMvBEcjB+4GEPDK1Qg==";
#};


# We created zones when setting up DNS servers
#zone 1.11.10.in-addr.arpa {
#  primary 10.11.1.2;
#  key "rndc-key";  
#}
#zone hl.local {
#  primary 10.11.1.2;
#  key "rndc-key";
#}





{% for i in range(Network.group|length) %}
{% set outer_loop_index = loop.index0 %}
  {% for j in range(Network.group[outer_loop_index].subnets|length) %}

##################{{ Network.group[outer_loop_index].subnets[loop.index0].name }}#################
subnet {{ Network.group[outer_loop_index].subnets[loop.index0].subnet }} netmask {{ DEFAULT_NETMASK }}
{
    option domain-name {{ DHCP_OPTION_DOMAIN_NAME }};
    option subnet-mask {{ DEFAULT_NETMASK }};
    option routers {{ Network.group[outer_loop_index].subnets[loop.index0].option_routers }};
    option domain-name-servers {{ DOMAIN_NAME_SERVER_1 }}, {{ DOMAIN_NAME_SERVER_2 }};
    pool
    {
    failover peer "failover-dhcp";        
    range {{ Network.group[outer_loop_index].subnets[loop.index0].pool_range_start }} {{ Network.group[outer_loop_index].subnets[loop.index0].pool_range_end }};
    }
}
  {% endfor %}
{% endfor %}
